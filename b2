package gowtham;

import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;

public class Amount
{

	public static class Map extends MapReduceBase implements
	 Mapper<LongWritable, Text, Text, IntWritable>
	{
		private final static IntWritable one=new IntWritable(1);
	

		@Override
		public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> out, Reporter arg3)
				throws IOException
		{
			// TODO Auto-generated method stub
			//String myvalue=value.toString();
			String line=value.toString();
			String[] data=line.split(",");
//			out.collect(new Text(data[2]), one);
			out.collect(new Text(data[2]), new IntWritable(Integer.parseInt(data[3])));
//			StringTokenizer token=new StringTokenizer(myvalue);
//			while(token.hasMoreTokens()) {
//				word.set(token.nextToken());
//				out.collect(word, one);
//			}
			
		}
		
		
	}
	
	public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable>
	{

		@Override
		public void reduce(Text key, Iterator<IntWritable> value, OutputCollector<Text, IntWritable> out,
				Reporter arg3) throws IOException
		{
			// TODO Auto-generated method stub
			int sum=0;
			while(value.hasNext()) {
				sum+=value.next().get();
			}
			out.collect(key, new IntWritable(sum));
		}
		
	}
	
	
	
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		JobConf conf =new JobConf(Amount.class);
		conf.setJobName("WC");
		
		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);
		
		conf.setMapperClass(Map.class);
		conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);
		
		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);
		
		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));
		
		JobClient.runJob(conf);
		
				
		
		
		
	}

}

hdoop@Ubuntu:~$ hdfs dfs -mkdir /amountinput
2023-07-02 01:03:07,944 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable

hdoop@Ubuntu:~$ hdfs dfs -copyFromLocal /home/hdoop/data.csv /amountinput
2023-07-02 01:03:25,584 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable

hdoop@Ubuntu:~$ hadoop jar gow2.jar /amountinput /amountsoutput

hdoop@Ubuntu:~$ hdfs dfs -cat /amountsoutput/p*
2023-07-02 01:05:45,272 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
goobe	6500
kaage	4500
kappe	3000
